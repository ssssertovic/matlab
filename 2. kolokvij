UUM – 2. kolokvij


% a)Generisati i sabrati ciste tonove frekvencije 300 Hz i 700 Hz, frekvencije uzrokovanja fs=4000 Hz. Generisani zvucni dignal prikazati u vremenskom i frekvencijskom domenu
% b) Projektovati visokopropusni filter ako su zadani ulazni parametri: frekvencija uzrokovanja fs=44000 Hz, granica propusnog filtera ako su Wp=3000 Hz, granica nepropusnog pojasa Ws=2900 Hz, valovitost u propusnom pojasu Rp=1 Db i slabljenje u nepropusnom pojasu Rs=40 dB
% 1. a)
Fs=4000;
T=1/Fs;
L=1000;
t=(0:L-1)*T;

y=0.7*sin(2*pi*300*t)+sin(2*pi*700*t);
subplot(211)
plot(t(1:200),y(1:200))
title('Sinusni signal');
xlabel('Vrijeme');
ylabel('Amplituda');

NFFT=2^nextpow2(L);
Y=fft(y,NFFT)/L;
f=Fs/2*linspace(0,1,NFFT/2+1);
subplot(212)
plot(f,2*abs(Y(1:NFFT/2+1)),'r')
xlabel('Frekvencija');
ylabel('Funkcija y');

%% b)
clear all
clc

fs=44000;
Wp=[2*3000/fs];
Ws=[2*2900/fs];
Rp=1;
Rs=40;

d=fdesign.highpass('Fst,Fp,Ast,Ap',Ws,Wp,Rs,Rp);
f=design(d,'cheby2');
info(f)
fvtool(f)
[Y,FS]=wavread('matlab.wav');
t=0:1/fs:1/fs*(length(Y)-1);
plot(t,Y)
xlabel('Vrijeme [s]')
ylabel('Amplituda')
hold on
izlaz=filter(f,Y);
plot(t,izlaz,'r-')
legend('Ulazni signal','Filtrirani signal')







% 3. nacrtati graf funkcije f=sin(3theta) u polarnim koordinatama i izvrsiti njegovu rotaciju za puni krug u vremenu od 2s. Tkdd nacrttati plohu z=sin(x^2+y^2) i izcrsiti njegovu rotaciju za dva kruga u vremenu od 5s
figure
theta=0:pi/100:2*pi;
rho=sin(theta*3);
subplot(2,1,1),h=polar(theta,rho,'go');
pause
for i=1:60
    zdir=[0 0 1];
    center=[0 0 0];
    pause(2/60)
    rotate(h,zdir,6,center)
end
pause
[x,y]=meshgrid([-2:0.1:2]);
z=sin(x.^2+y.^2);
subplot(2,1,2),h=surf(x,y,z)
pause
axis tight
for i=1:100
    zdir=[0 0 -1];
    center=[0 0 0];
    rotate(h,zdir,7.2,center)
    pause(5/100)
end







%2. Ucitati sliku sa racunara u boji i zatim izvrsiti filtriranje upotrebom filter: 'motion', 'sobel', 'log', 'disk', 'unsharp'. Originalnu sliku i filtrirane slike prikazati naredbom subplot
s=imread('buket.jpg');
I=im2double(s);
subplot(3,2,1),imshow(I), title('Original');

H=fspecial('motion',30,60);
Motion=imfilter(I,H,'replicate');
subplot(3,2,2),imshow(Motion),title('Motion');

H=fspecial('sobel');
Sobel=imfilter(I,H,'replicate');
subplot(3,2,3),imshow(Sobel),title('Sobel');

H=fspecial('log',[30,100],0.2);
Log=imfilter(I,H,'replicate');
subplot(3,2,4),imshow(Log),title('Log');

H=fspecial('disk',20);
Disk=imfilter(I,H,'replicate');
subplot(3,2,5),imshow(Disk),title('Disk');

H=fspecial('unsharp');
Unsharp=imfilter(I,H,'replicate');
subplot(3,2,6),imshow(Unsharp),title('Unsharp');






%4. Nacrtati cetverostranu piramidu cija je duzina stranica osnove a=3, a visina piramide h=4? Izracunati povrsinu i zapreminu piramide
clear all
close all

a=3;
h=4;
P=a^2 + 2*a*h;
V=a^2*h./3;

fprintf('Povrsina je:');
disp(P);
fprintf('Zapremina je:');
disp(V);

x = [0 3 3 0];
y = [0 0 3 3];
z = [0 0 0 0];
patch(x,y,z,'y');
grid on;
axis([-2 5 -2 5]);
xlabel('x-osa');
ylabel('y-osa');
zlabel('z-osa');

x = [0 3 1.5];
y = [0 0 1.5];
z = [0 0 4];
patch(x,y,z,'r');
grid on;
axis([-2 5 -2 5]);
xlabel('x-osa');
ylabel('y-osa');
zlabel('z-osa');

x = [0 0 1.5]
y = [0 3 1.5];
z = [0 0 4];
patch(x,y,z,'g');
grid on;
axis([-2 5 -2 5]);
xlabel('x-osa');
ylabel('y-osa');
zlabel('z-osa');

x = [0 3 1.5];
y = [3 3 1.5];
z = [0 0 4];
patch(x,y,z,'b');
grid on;
axis([-2 5 -2 5]);
xlabel('x-osa');
ylabel('y-osa');
zlabel('z-osa');

x = [3 3 1.5];
y = [0 3 1.5];
z = [0 0 4];
patch(x,y,z,'m');
grid on;
axis([-2 5 -2 5]);
xlabel('x-osa');
ylabel('y-osa');
zlabel('z-osa');








%4. Unositi rijeci upotrebom tastature sve dok se ne unese rijec koja pocinje sa slovom 'i', a zavrsava sa slovom 'd' te u seni ima samo samoglasnike. Tu rijec treba pretvoriti u velika slova. Zatim sve unesene rijeci napisati kao niz na nacin da svaki samoglasnik bude ispisan velikim slovom osim zadnje rijeci koja je vec ispisana velikim slovima. Prebrojati unesene rijeci
clc;
clear;

% Inicijalizacija varijabli
rijeci = {}; % Lista za spremanje unesenih riječi
samoglasnici = 'aeiou'; % Samoglasnici
konacnaRijec = ''; % Posljednja riječ koja zadovoljava uvjet
brojac = 0; % Brojač unesenih riječi

while true
    % Unos riječi s tastature
    rijec = input('Unesite riječ: ', 's');
    rijeci{end + 1} = rijec;
    brojac = brojac + 1;
    
    % Provjera da li riječ zadovoljava uvjet
    if startsWith(rijec, 'i') && endsWith(rijec, 'd')
        % Provjera da li riječ sadrži samo samoglasnike (osim prvog i posljednjeg slova)
        sredina = rijec(2:end-1);
        if all(ismember(sredina, samoglasnici))
            konacnaRijec = upper(rijec);
            rijeci{end} = konacnaRijec; % Zamjena originalne riječi sa riječi u velikim slovima
            break;
        end
    end
end

% Pretvaranje svih riječi u niz s velikim samoglasnicima, osim zadnje riječi
for i = 1:length(rijeci) - 1
    rijec = rijeci{i};
    for j = 1:length(rijec)
        if ismember(rijec(j), samoglasnici)
            rijec(j) = upper(rijec(j));
        end
    end
    rijeci{i} = rijec;
end

% Ispis rezultata
fprintf('Ukupan broj unesenih riječi: %d\n', brojac);
fprintf('Sve unijete riječi sa velikim samoglasnicima osim zadnje:\n');
disp(rijeci(1:end-1));
fprintf('Zadnja riječ:\n%s\n', konacnaRijec);







%3. Program procita jednu recenicu. Nakon toga odredi najduzu rijec koja se nalazi u recenici. Tu najduzu rijec ispise naopako (npr. Danas je srijeda. ->rijec srijeda -> ispise adejirs). Nakon toga ispise datu recenicu s novom rijeci. Definisati izuzetke u programu. Voditi racuna o vecem broju praznih mjesta koji se mogu naci izmedju rijcei, u rijeci ne spadaju zarez, tacka itd
clear all
clc

try
    % Unos rečenice s tastature
    recenica = input('Unesite rečenicu: ', 's');
    
    % Zamjena zareza i tačaka s praznim mjestima
    recenica = regexprep(recenica, '[,\.]', '');
    
    % Razdvajanje riječi i uklanjanje praznih mjesta
    rijeci = strsplit(recenica);
    rijeci = rijeci(~cellfun('isempty', rijeci));
    
    if isempty(rijeci)
        error('Rečenica ne sadrži valjane riječi.');
    end
    
    % Pronalaženje najduže riječi
    najduzaRijec = '';
    for i = 1:length(rijeci)
        if length(rijeci{i}) > length(najduzaRijec)
            najduzaRijec = rijeci{i};
        end
    end
    
    % Okretanje najduže riječi
    okrenutaRijec = flip(najduzaRijec);
    
    % Zamjena najduže riječi u rečenici s okrenutom riječju
    for i = 1:length(rijeci)
        if strcmp(rijeci{i}, najduzaRijec)
            rijeci{i} = okrenutaRijec;
        end
    end
    
    % Ispis rezultata
    novaRecenica = strjoin(rijeci, ' ');
    fprintf('Originalna rečenica: %s\n', recenica);
    fprintf('Najduža riječ: %s\n', najduzaRijec);
    fprintf('Okrenuta riječ: %s\n', okrenutaRijec);
    fprintf('Nova rečenica: %s\n', novaRecenica);
    
catch ME
    % Obrada izuzetaka
    fprintf('Došlo je do greške: %s\n', ME.message);
end









%1.Unijeti tekst sa tastature i provjeriti koliko u njemu ima slogova 'sni' i na kojim indeksima se ponavlja. Pronaci koliko taj tekst sadrzi praznih mjesta i na kojim indeksima se nalaze. Provjeriti koliko u tekstu ima recenica te koliko ima upitnih, uzvicnih i izjavnih, i ispisati broj rijeci u tekstu
% Unos teksta sa tastature
tekst = input('Unesite tekst: ', 's');

% Pronalazak svih pojavljivanja sloga 'sni'
slog = 'sni';
slogIndeksi = strfind(tekst, slog);
brojSlogova = length(slogIndeksi);

% Pronalazak svih pojavljivanja praznih mjesta
praznaMjesta = find(tekst == ' ');
brojPraznihMjesta = length(praznaMjesta);

% Brojanje rečenica
recenice = regexp(tekst, '[.!?]', 'split');
brojRecenica = length(recenice) - 1;

% Brojanje upitnih, uzvičnih i izjavnih rečenica
brojUpitnih = length(find(tekst == '?'));
brojUzvicnih = length(find(tekst == '!'));
brojIzjavnih = length(find(tekst == '.'));

% Brojanje riječi u tekstu
rijeci = strsplit(tekst);
brojRijeci = length(rijeci);

% Ispis rezultata
fprintf('Broj pojavljivanja sloga ''sni'': %d\n', brojSlogova);
fprintf('Indeksi pojavljivanja sloga ''sni'': ');
disp(slogIndeksi);

fprintf('Broj praznih mjesta: %d\n', brojPraznihMjesta);
fprintf('Indeksi praznih mjesta: ');
disp(praznaMjesta);

fprintf('Broj rečenica: %d\n', brojRecenica);
fprintf('Broj upitnih rečenica: %d\n', brojUpitnih);
fprintf('Broj uzvičnih rečenica: %d\n', brojUzvicnih);
fprintf('Broj izjavnih rečenica: %d\n', brojIzjavnih);
fprintf('Broj riječi u tekstu: %d\n', brojRijeci);








%3. Ucitati proizvoljni zvucni signal. Izvrsiti linearno pojacavanje zvucnog signala, zatim napraviti inverziju signala
clc 
clear all 
close all

[zvuk,fs] = audioread('matlab.wav'); 
ramp = 0:1/(length(zvuk)-1):1; 
linearno_pojacanje = zvuk.*ramp'; 
inverzija = zvuk .* (1 - ramp');
t = 0:1/fs:1/fs*(length(zvuk)-1); 
subplot(211)
plot(t,zvuk)
title('Ulazni zvucni signal'); 
axis([0 2 -1 1])
subplot(212)
plot(t,linearno_pojacanje)
hold on 
plot(t, inverzija, 'g', 'LineWidth', 2);
plot(t, ramp, 'r', 'LineWidth', 2);
title('Linearno pojacanje i inverzija signala');
xlabel('Vrijeme (s)');
ylabel('Amplituda');
legend('Linearno pojacanje', 'Inverzija', 'Ramp', 'Location', 'best');
axis([0 2 -1 1]);








% 2. Ucitati proizvoljnu RGB sliku, pa sacuvati u zasebnim folderima original i crvenu komponentu, original i plavu komponentu i original i zelenu komponentu. Komponente kreirati koristeci funkciju function[boja]=komponenta(slika,RGB)
function [ boja ] = komponenta( slika, RGB )
boja=slika;
vel_u_pikselima = size(slika);
sirina=vel_u_pikselima(1);
visina=vel_u_pikselima(2);
if RGB == 'R'
for i=1:1:sirina
for j=1:1:visina
boja(i,j,2)=0;
boja(i,j,3)=0;
end
end
end
if RGB == 'G'
for i=1:1:sirina
for j=1:1:visina
boja(i,j,1)=0;
boja(i,j,3)=0;
end
end
end
if RGB == 'B'
for i=1:1:sirina
for j=1:1:visina
boja(i,j,1)=0;
boja(i,j,2)=0;
end
end
end
slika=imread('buket.jpg');
crvena=komponenta(slika,'R');
zelena=komponenta(slika,'G');
plava=komponenta(slika,'B');

figure(1); image(crvena);
figure(2); image(zelena);
figure(3); image(plava);

imwrite(crvena,'Crvena.jpg');
imwrite(zelena,'Zelena.jpg');
imwrite(plava,'Plava.jpg');








% 4. Sunce
t=0:pi/50:2*pi;
x=cos(t);
y=sin(t);
krug=patch(x,y,'y');
axis([-2 2 -2 2]);
 
x1=[-0.225 0.225 0];
y1=[1.2 1.2 1.5];
trokut1=patch(x1,y1,'y');
 
x2=[-0.225 0.225 0];
y2=[-1.2 -1.2 -1.5];
trokut2=patch(x2,y2,'y');
 
x3=[1.2 1.2 1.5];
y3=[0.225 -0.225 0];
trokut3=patch(x3,y3,'y');
 
x4=[-1.2 -1.2 -1.5];
y4=[0.225 -0.225 0];
trokut4=patch(x4,y4,'y');
 
x5=[0.90 1 0.6];
y5=[0.65 1.1 1];
trokut5=patch(x5,y5,'y');
 
x6=[0.90 1 0.6];
y6=[-0.65 -1.1 -1];
trokut6=patch(x6,y6,'y');
 
x7=[-0.9 -1 -0.6];
y7=[0.65 1.1 1];
trokut7=patch(x7,y7,'y');
 
x8=[-0.9 -1 -0.6];
y8=[-0.65 -1.1 -1];
trokut8=patch(x8,y8,'y');
 
sunce=[krug trokut1 trokut2 trokut3 trokut4 trokut5 trokut6 trokut7 trokut8];
 
for i=1:60
    rotate(sunce, [0 0 1], 30, [0 0 0]);
   pause(2/60);
end









%3. Nacrtati objekat ako na slici i napraviti da se kugla krece lijevo-desno unutar objekta uz istovremeno okretanje itse. Kugla za 3s prijedje s lijeva na desno i obratno (kugla lijevo-desno)
x1 = 0;
y1 = -0.5:0.001:0.1;
x2 = 4;
y2 = -0.5:0.001:0;
y3 = 0;
x3 = 0:0.01:4;

plot(x1*ones(size(y1)), y1, x2*ones(size(y2)), y2, x3, y3*ones(size(x3)), 'LineWidth', 4)
hold on

t = (0:1/720:1)' * 2 * pi;
x = 0.1 + 0.1 * sin(t);
y = 0.1 + 0.1 * cos(t);
h = fill(x, y, 'b');
axis([-0.5 4.5 -0.5 2])

xr = x;
yr = y;
a = 0; b = 0; c = 0;

% Kretanje lopte s lijeva na desno i obrnuto
for i = 1:80
    xr = xr + (3.8 / 80);  % Pomicanje po x osi za 3.8 u 80 koraka
    a = a + (3.8 / 80);    % Pomicanje centra rotacije
    pause(3 / 160)         % Pauza od 3/160 sekundi između koraka
    set(h, 'xdata', xr, 'ydata', yr)
    rotate(h, [0 0 1], 10, [a b 0])  % Rotacija oko z osi
end

for i = 1:80
    xr = xr - (3.8 / 80);  % Pomicanje u suprotnom smjeru za istu udaljenost
    a = a - (3.8 / 80);    % Pomicanje centra rotacije
    pause(3 / 160)         % Pauza između koraka
    set(h, 'xdata', xr, 'ydata', yr)
    rotate(h, [0 0 1], 10, [a b 0])  % Rotacija oko z osi
end









% 2. Koristeci naredbu ROTATE izvrsiti rotaciju tijela prema slici. Polozaj – kretanje tijela izvrsiti naredbom SET (trokut)
close all
clc
x1=[6 8 7 ]
y1=[3 3 2]
trougao=patch(x1,y1,'r')
x11=x1
y11=y1
axis([3 8 -1 3])
for i=1:30
    x11=x11-0.1
    y11=y11;
    set(trougao,'x',x11,'y',y11)
    pause(3/30)
end

a=x11+1
b=y11-0.5
for i=1:30
    x11=x11+0.1
    y11=y11-0.1;
  set(trougao,'x',x11,'y',y11)
    pause(3/30)
   
end

for i=1:30
         rotate(trougao,[0 0 1],6,[7,-0.5,0])
         pause (0.1)
end

x11=[6 8 7]
y11=[-1 -1 0]
for i=1:30
    x11=x11-0.1
    y11=y11;
    set(trougao,'x',x11,'y',y11)
    pause(2/30)
end
for i=1:30
    x11=x11+0.1
    y11=y11+0.1;
    set(trougao,'x',x11,'y',y11)
    pause(2/30)
end

for i=1:30
      rotate(trougao,[0 0 1],6,[7,2.5,0])
      pause (1/30)
end    









%2. Nacrtati sestougao kao na slici  i napraviti da s ekrece lijevo-desno 5 puta u vremenu od 10s po liniji uz istovremeno okretanje sestougla
clc
clear all
close all
x=[0 10 10 0]
y=[0 0 0.8 0.8]
patch(x,y,'r')
hold on

t=(1/12:1/6:1)'*2*pi
x1=sin(t)+1
y1=cos(t)+2
h=fill(x1,y1,'y');
axis([-2 12 -12 12])
grid on
x11=x1;
y22=y1;
cx=1;

for k=1:5
for i=1:30
zdir=[0 0 1];
center=[cx 2 0]    

    set(h,'x',x11,'y',y22)
    rotate(h,zdir,i*30,center)
    cx=cx+0.27444;
  
    x11=x11+0.27444;
    y22=y22;
    
    pause(0.025)
end

for j=1:30
    zdir=[0 0 1];
     cx=cx;
     center=[cx 2 0];
  
    set(h,'x',x11,'y',y22)
    rotate(h,zdir,j*30,center) 
      x11=x11-0.27444;
    y22=y22;
    cx=cx-0.27444;
    pause(0.025)
end
end







4. GUI ZA TEKST
  function StartButtonPushed(app, event)
            % Get input text
            text = app.InputTextArea.Value;
            text = string(text);
            % Count words
            
            words = strsplit(text);
            numRijeci = length(words);

            
            % Count exclamation sentences
            numUsklicnih = numel(strfind(text, '!'));
            numIzjavnih = numel(strfind(text, '.'));
            numUpitnih = numel(strfind(text, '?'));
            numRecenica = numUsklicnih + numIzjavnih + numUpitnih;
            % Count vowels
            textlower = lower(text);
            numa = numel(strfind(textlower, 'a'));
            nume = numel(strfind(textlower, 'e'));
            numi = numel(strfind(textlower, 'i'));
            numo = numel(strfind(textlower, 'o'));
            numu = numel(strfind(textlower, 'u'));

            numSamoglasnika = numa+nume+numi+numo+numu;


% Count non-vowels
            numSuglasnika = sum(isletter(text)) - numSamoglasnika;  % Count all letters minus vowels

            % Update fields
            app.RijeciEditField.Value = num2str(numRijeci);
            app.RecenicaEditField.Value = num2str(numRecenica);
            app.UsklicnihEditField.Value = num2str(numUsklicnih);
            app.IzjavnihEditField.Value = num2str(numIzjavnih);
            app.UpitnihEditField.Value = num2str(numUpitnih);
            app.SamoglasnikaEditField.Value = num2str(numSamoglasnika);
            app.SuglasnikaEditField.Value = num2str(numSuglasnika);
        
        end

        % Button pushed function: DeleteButton
        function DeleteButtonPushed(app, event)
            app.InputTextArea.Value = '';
            
            % Clear the results fields
            app.RijeciEditField.Value = num2str(0);
            app.RecenicaEditField.Value = num2str(0);
            app.UsklicnihEditField.Value =num2str(0);
            app.IzjavnihEditField.Value =num2str(0);
            app.UpitnihEditField.Value = num2str(0);
            app.SamoglasnikaEditField.Value = num2str(0);
            app.SuglasnikaEditField.Value = num2str(0);







GUI HANA - unos rijeci a)spajanje rijeci u recenicu, koliko ima slova u recenici i suglasnika, ispisati recenicu i broj slova u svakoj rijeci i broj samoglasnika (npr. u rece
nici ima 5 slova, od toga 3 samoglasnika (i navesti samoglasnike))
  % Button pushed function: SpajanjerijeiButton
        function SpajanjerijeiButtonPushed(app, event)
            sentence = app.EditField.Value;
    app.ResultTextArea.Value = sentence;

% Button pushed function: SlovaisuglasniciButton
        function SlovaisuglasniciButtonPushed(app, event)
            sentence = app.EditField.Value;
            vowels = 'aeiouAEIOU';
            numVowels = sum(ismember(sentence, vowels));
            numNonVowels = sum(~ismember(sentence, vowels) & isletter(sentence));
            app.ResultTextArea.Value = sprintf('Broj slova: %d, Broj suglasnika: %d', numVowels + numNonVowels, numNonVowels);
       

% Button pushed function: ReenicabrojrijeibrojsuglasnikaButton
        function ReenicabrojrijeibrojsuglasnikaButtonPushed(app, event)
            sentence = app.EditField.Value;
            words = strsplit(sentence);
            result = '';
            vowels = 'aeiouAEIOU';
            
            for i = 1:length(words)
                word = words{i};
                numVowels = sum(ismember(word, vowels));
                result = [result, sprintf('Riječ: %s, Broj slova: %d, Broj samoglasnika: %d, Samoglasnici: %s\n', ...
                    word, length(word), numVowels, word(ismember(word, vowels)))];
            end
            
            app.ResultTextArea.Value = result;






GUI ESMA - MATRICA

 % Size changed function: UlaznipodaciPanel
        function UlaznipodaciPanelSizeChanged(app, event)
            position = app.UlaznipodaciPanel.Position;
            
        end

        % Value changed function: ElementiprvematriceTextArea
        function ElementiprvematriceTextAreaValueChanged(app, event)
            value = app.ElementiprvematriceTextArea.Value;
            
        end

        % Button pushed function: IspisirezultateButton
        function IspisirezultateButtonPushed(app, event)
            mat1 = str2num(char(app.ElementiprvematriceTextArea.Value));
            mat2 = str2num(char(app.ElementidrugematriceTextArea.Value));
            %prikaz matrica
            app.PrvamatricaTextArea.Value = mat2str(mat1);
            app.DrugamatricaTextArea.Value = mat2str(mat2);
             % Racunanje i prikaz inverznih matrica
            if det(mat1) ~= 0
                app.InverznamatricaTextArea.Value = mat2str(inv(mat1));
            else
                app.InverznamatricaTextArea.Value = 'N/A';
            end

            if det(mat2) ~= 0
                app.InverznamatricaTextArea_2.Value = mat2str(inv(mat2));
            else
                app.InverznamatricaTextArea_2.Value = 'N/A';
            end
             % Prikaz transponovanih matrica
            app.TransponovanamatricaTextArea.Value = mat2str(mat1');
            app.TransponovanamatricaTextArea_2.Value = mat2str(mat2');
            % Operacije sa matricama
            if isequal(size(mat1), size(mat2))
                app.ZbirmatricaTextArea.Value = mat2str(mat1 + mat2);
                app.RazlikamatricaTextArea.Value = mat2str(mat1 - mat2);
            else
                app.ZbirmatricaTextArea.Value = 'N/A';
                app.RazlikamatricaTextArea.Value = 'N/A';
            end

            if size(mat1, 2) == size(mat2, 1)
                app.ProizvodmatricaTextArea.Value = mat2str(mat1 * mat2);
            else
                app.ProizvodmatricaTextArea.Value = 'N/A';
            end









%Crtati semafor i izvrsiti simulaciju njgovog rada (crvena svijetli 50s, zuta 5s, zelena 50s pa tri puta trepce u trajanju od 5s zatim se ukljucuje zuto svjetlo pa crveno i proces se ponavlja) Lagoditi za pjesake rad semafora
x1=[-1.2 1.2 1.2 -1.2];
y1=[-6.2 -6.2 1.2 1.2];
vsemafor=patch(x1,y1,'black')
hold on

t=(0:1/360:1)'*2*pi;
x=sin(t)
y=cos(t)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'black')
hold on
axis([-2 5 -7 2])

x2=[2.3 4.5 4.5 2.3];
y2=[-6.2 -6.2 -2.5 -2.5];
msemafor=patch(x2,y2,'black')
hold on
x3=0.8*cos(t);
y3=0.8*sin(t);
crvenom=fill(x3+3.4,y3-3.4,'black')
hold on
zelenom=fill(x3+3.4,y3-5.1,'black')
hold on
for i=1:3
    pause(0.5)
crveno=fill(x,y,'red')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'black')
hold on
end
for i=1:6
    pause(0.5)
    crvenom=fill(x3+3.4,y3-3.4,'black')
    hold on
    zelenom=fill(x3+3.4,y3-5.1,'g')
    hold on
end
    
for i=1:3
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'y')
hold on
zeleno=fill(x,y-5,'black')
hold on
end
for i=1:3
    crvenom=fill(x3+3.4,y3-3.4,'r')
    hold on
    zelenom=fill(x3+3.4,y3-5.1,'black')
    hold on
end
for i=1:3
    pause(1)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'g')
hold on
end

%titranje zelenog svjetla
for i=1:1
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'black')
hold on
end
for i=1:1
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'g')
hold on
end
for i=1:1
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'black')
hold on
end
for i=1:1
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'g')
hold on
end
for i=1:1
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'black')
hold on
end
for i=1:1
    pause(0.5)
crveno=fill(x,y,'black')
hold on
zuto=fill(x,y-2.5,'black')
hold on
zeleno=fill(x,y-5,'g')
hold on
end








% Napraviti program koji vremenski sklapa slagalicu
x1=[1 4 4 1];
y1=[4 4 6 6];
zid=patch(x1,y1,'y')

x2=[2 3 3 2];
y2=[2.7 2.7 3.5 3.5];
prozor=patch(x2,y2,'b')

x3=[2 3.5 3.5 2];
y3=[1.5 1.5 2.2 2.2];
vrata=patch(x3,y3,'g')

x4=[4 5.5 5.5];
y4=[2.5 1 4];
krov=patch(x4,y4,'r')
axis([0 10 0 7])
pause(1)
for i=1:60
    x11=x1;
    y11=y1;
    x11=x11+5;
    y11=y11-3;
    pause((13/4)/60)
    set(zid,'x',x11,'y',y11)
end
for i=1:60
    x22=x4;
    y22=y4;
    x22=x22;
    y22=y22+2;
    pause((13/4)/60)
    set(krov,'x',x22,'y',y22)
end
a=4.75;
b=4.5;
rotate(krov,[0 0 1],270,[a b 0])
V=get(krov,'Vertices');
x33=[V(1,1) V(2,1) V(3,1)];
y33=[V(1,2) V(2,2) V(3,2)];
for i=1:60
    x44=x33;
    y44=y33;
    x44=x44+2.75;
    y44=y44-0.75;
    pause((13/4)/60)
    set(krov,'x',x44,'y',y44)
end

for i=1:60
    x55=x2;
    y55=y2;
    x55=x55+5.6;
    y55=y55-0.9;
    pause((13/4)/60)
    set(prozor,'x',x55,'y',y55)
end

a1=2.75;
b1=1.85;
rotate(vrata,[0 0 1],90,[a1 b1 0])
V=get(vrata,'Vertices');
x66=[V(1,1) V(2,1) V(3,1) V(4,1)];
y66=[V(1,2) V(2,2) V(3,2) V(4,2)];

for i=1:60
    x77=x66;
    y77=y66;
    x77=x77+4;
    y77=y77-0.1;
    pause((13/4)/60)
    set(vrata,'x',x77,'y',y77)
end









% GUI HANA 2 – SPAJANJE RIJECI 
function SpajanjerijeiButtonPushed(app, event)
           sentence = app.EditField.Value; % Dobijemo tekst iz EditField-a
    app.ResultTextArea.Value = sentence; % Postavimo vrijednost ResultTextArea-e na dobiveni tekst

        end

        % Button pushed function: SlovaisuglasniciButton
        function SlovaisuglasniciButtonPushed(app, event)
            sentence = app.EditField.Value;
            vowels = 'aeiouAEIOU';
            numVowels = sum(ismember(sentence, vowels));
            numNonVowels = sum(~ismember(sentence, vowels) & isletter(sentence));
            app.ResultTextArea.Value = sprintf('Broj slova: %d, Broj suglasnika: %d', numVowels + numNonVowels, numNonVowels);
        end

        % Button pushed function: ReenicabrojrijeibrojsuglasnikaButton
        function ReenicabrojrijeibrojsuglasnikaButtonPushed(app, event)
            sentence = app.EditField.Value;
            words = strsplit(sentence);
            result = '';
            vowels = 'aeiouAEIOU';
            
            for i = 1:length(words)
                word = words{i};
                numVowels = sum(ismember(word, vowels));
                result = [result, sprintf('Riječ: %s, Broj slova: %d, Broj samoglasnika: %d, Samoglasnici: %s\n', ...
                    word, length(word), numVowels, word(ismember(word, vowels)))];
            end
            
            app.ResultTextArea.Value = result;










% GUI HANA 3 – PIRAMIDA 
function DrawButtonPushed(app, event)
             height = app.HeightEditField.Value;
        baseLength = app.BaseLengthEditField.Value;

        % Calculate the vertices of the tetrahedron
        A = [0, 0, 0];
        B = [baseLength, 0, 0];
        C = [baseLength/2, baseLength*sqrt(3)/2, 0];
        D = [baseLength/2, baseLength*sqrt(3)/6, height];

        % Define the faces of the tetrahedron
        faces = [
            1, 2, 3;
            1, 3, 4;
            1, 4, 2;
            2, 3, 4
        ];

        % Plot the tetrahedron
        cla(app.UIAxes); % Clear previous plot
        hold(app.UIAxes, 'on');
        patch(app.UIAxes, 'Vertices', [A; B; C; D], 'Faces', faces, 'FaceColor', 'cyan', 'EdgeColor', 'k');
        view(app.UIAxes, 3); % Set 3D view
        axis(app.UIAxes, 'equal'); % Set equal axis scales
        xlabel(app.UIAxes, 'X');
        ylabel(app.UIAxes, 'Y');
        zlabel(app.UIAxes, 'Z');
        title(app.UIAxes, 'Tetrahedron');
        hold(app.UIAxes, 'off');











%izvrsiti animaciju kretanje tacke kroz putanju
% generiranje objekta
t = linspace(0,2*pi,100);
x = 5*cos(t);
y = 2*sin(t);
z = t;
% iscrtavanje
figure
clf 
for k = 1:length(t)
 
 t_k = t(k);
 x_t = x(k);
 y_t = y(k);
 z_t = z(k);
 
 plot3(x_t,y_t,z_t,'go','Linewidth',3,'MarkerSize',15);
 hold on
 plot3(x,y,z,'b-','LineWidth',2);
 grid on
 xlabel('x-osa');
 ylabel('y-osa');
 zlabel('z-osa');
 title(['Tacka je na putanji t=', num2str(t_k),' sekundi']);
 view([30 35]);
 movieVector(k) = getframe; 
 myWriter = VideoWriter('krivulja','MPEG-4');
 myWriter.FrameRate = 20;
 open(myWriter);
 writeVideo(myWriter);
end










% DIFERENCIJALNA JEDNACINA
syms x y(x)
jed1 = (1 + x^2) * diff(y, x) == x * (2 * y + 1);
jed2 = x* diff(y,x) - (y)/(x+1) == x;
rj_jed1 = dsolve(jed1);
uslov_2=y(0)==-1;
rj_jed2 = dsolve(jed2);
disp(rj_jed1)
disp(rj_jed2)









% Generisati čisti ton frekvencije 100 Hz u trajanju od 1s sa frekvencijom 
uzrokovanja od
% 3000 uzoraka po sekundi. Takoder, generisati šum trajanja 2s sa frekvencijom 
uzrokovanja 
% od 1000 Hz korištenjem naredbe rand. Nakon toga izvršiti spajanje ovih signala. 
% Signal koji se dobije spajanjem miksati sa sinusnim signalom x-0.5 sin(2 pi t).
% Prikazati sve zvučne signale.

% Step 1: Generate a clean tone of 100 Hz for 1 second at 3000 Hz sampling rate
fs1 = 3000; % Sampling frequency for the tone
t1 = 0:1/fs1:1-1/fs1; % Time vector for 1 second
tone = sin(2*pi*100*t1); % Generate the 100 Hz tone

% Step 2: Generate white noise for 2 seconds at 1000 Hz sampling rate
fs2 = 1000; % Sampling frequency for the noise
t2 = 0:1/fs2:2-1/fs2; % Time vector for 2 seconds
noise = randn(size(t2)); % Generate white noise
% Step 3: Combine the clean tone and the white noise
% Ensure both signals are of the same length by padding the shorter one with zeros
if length(tone) < length(noise)
 tone = [tone zeros(1, length(noise) - length(tone))];
elseif length(noise) < length(tone)
 noise = [noise zeros(1, length(tone) - length(noise))];
end
combined_signal = tone + noise;
% Step 4: Mix the combined signal with a sinusoidal signal
t_combined = 0:1/fs1:(length(combined_signal)-1)/fs1; % Time vector for combined 
signal
sinusoid = 0.5 * sin(2 * pi * t_combined); % Generate the sinusoidal signal
mixed_signal = combined_signal + sinusoid;
% Step 5: Display all the sound signals
subplot(4, 1, 1);
plot(t1, tone);
title('100 Hz Tone');
subplot(4, 1, 2);
plot(t2, noise);
title('White Noise');
subplot(4, 1, 3);
plot(t_combined, combined_signal);
title('Combined Signal');
subplot(4, 1, 4);
plot(t_combined, mixed_signal);
title('Mixed Signal');
% Play the sounds
sound(tone, fs1);
pause(1);
sound(noise, fs2);
pause(2);
sound(combined_signal, fs1);
pause(length(combined_signal)/fs1);
sound(mixed_signal, fs1);










Spojiti zvučne signale upotrebom operatora konkatanacije toms.wav i tenor-sax.wav
i prikazati ih upotrebom naredbe plot.
[zvuk 1,fs]=wavread( 'toms.wav' );
[zvuk2,fs]=wavread( 'tenorsax.wav');
spojeni = [zvuk 1; zvuk2];
t=0:1/fs:1/fs* (length(spojeni)-1);
plot(t,spojeni)
xlabel('Vrijeme[s]')
ylabel('Amplituda')
% Izvršiti miksanje zvučnog signala toms.wav sa sinusnim signalom.x=0.5sin(2pi t).
Prikazati ulazne i izlazni zvučni signal.
zvuk1= 'toms.way';
[y, FS]= wavread(zvuk1);
t=0:1/Fs:1/Fs* (length(y)-1);
sinusnisignal = 0.5*sin(2*pi*t)';
novisignal = y + sinusnisignal;
subplot(3,1,1), plot(t,y, 'linewidth',2)
title('Ulazni signal' );
ylabel('Amplituda' )
subplot(3,1,2), plot(t,sinusnisignal, 'r', 'linewidth',2)
title('Sinusni signal' );
ylabel('Amplituda')
subplot(3,1,3), plot(t,novisignal, 'g', 'linewidth',2)
title('Miksani signal' );
xlabel('Vrijeme[s]')
ylabel('Amplituda')










Projektovati niskopropusni filter ako su zadani ulazni parametri:
frekvencija uzrokovanja fs-44000 Hz, granica propusnog pojasa Wp-1000 Hz,
granica nepropusnog pojasa Ws-1300 Hz,
valovitost u propusnom pojasu Rp=1 dB i slabljenje u nepropusnom pojasu Rs-40 dB.
fs=44000;
Wp=[2*1000/fs];
Ws=[2*1300/fs];
Rp=1;
Rs=40;
d=fdesign.lowpass('Fst,Fp,Ast,Ap',Ws,Wp,Rs,Rp);
f=design(d,'cheby2');
info(f)
fvtool(f)
[Y,FS]=wavread('matlab.wav');
t=0:1/fs:1/fs*(length(Y)-1);
plot(t,Y)
xlabel('Vrijeme [s]')
ylabel('Amplituda')
hold on
izlaz=filter(f,Y);
plot(t,izlaz,'r-')
legend('Ulazni signal','Filtrirani signal')








Učitati proizvoljni zvučni signal. Izvršiti linearno pojačavanje zvučnog signala,
zatim napraviti inverziju signala.
[zvuk,fs] = audioread('sound.mp3');
ramp = 0:1/(length(zvuk)-1):1;
linearno_pojacanje = zvuk.*ramp';
inverzija = zvuk .* (1 - ramp');
t = 0:1/fs:1/fs*(length(zvuk)-1);
subplot(211)
plot(t,zvuk)
title('Ulazni zvucni signal');
axis([0 2 -1 1])
subplot(212)
plot(t,linearno_pojacanje)
hold on
plot(t, inverzija, 'g', 'LineWidth', 2);
plot(t, ramp, 'r', 'LineWidth', 2);
title('Linearno pojacanje i inverzija signala');
xlabel('Vrijeme (s)');
ylabel('Amplituda');
legend('Linearno pojacanje', 'Inverzija', 'Ramp', 'Location', 'best');
axis([0 2 -1 1]);










%izvrsiti animaciju kretanje tacke kroz putanju
% generiranje objekta
t = linspace(0,2*pi,100);
x = 5*cos(t);
y = 2*sin(t);
z = t;
% iscrtavanje
figure
clf
for k = 1:length(t)
t_k = t(k);
x_t = x(k);
y_t = y(k);
z_t = z(k);
plot3(x_t,y_t,z_t,'go','Linewidth',3,'MarkerSize',15);
hold on
plot3(x,y,z,'b-','LineWidth',2);
grid on
xlabel('x-osa');
ylabel('y-osa');
zlabel('z-osa');
title(['Tacka je na putanji t=', num2str(t_k),' sekundi']);
view([30 35]);
movieVector(k) = getframe;
myWriter = VideoWriter('krivulja','MPEG-4');
myWriter.FrameRate = 20;
open(myWriter);
writeVideo(myWriter);
end








Unositi riječi upotrebom tastature sve dok se ne unese riječ koja počinje sa
slovom 'i'a završava sa slovom 'd' te u sebi ima samo samoglasnike.Tu riječ treba
pretvoriti u velika slova. Zatim sve unelene riječi napisati kao niz na način da
svaki samoglasni bude ispisan velikim slovom osim zadnje riječi koja je već
ispisana velikim slovima.Prebrojati unešene riječi.
rijeci = {};
samoglasnici = 'aeiou';
konacnaRijec = '';
brojac = 0;
while true
rijec = input('Unesite riječ: ', 's');
rijeci{end + 1} = rijec;
brojac = brojac + 1;
if startsWith(rijec, 'i') && endsWith(rijec, 'd')
sredina = rijec(2:end-1);
if all(ismember(sredina, samoglasnici))
konacnaRijec = upper(rijec);
rijeci{end} = konacnaRijec;
break;
end
end
end
for i = 1:length(rijeci) - 1
rijec = rijeci{i};
for j = 1:length(rijec)
if ismember(rijec(j), samoglasnici)
rijec(j) = upper(rijec(j));
end
end
rijeci{i} = rijec;
end
fprintf('Ukupan broj unesenih riječi: %d\n', brojac);
fprintf('Sve unijete riječi sa velikim samoglasnicima osim zadnje:\n');
disp(rijeci(1:end-1));
fprintf('Zadnja riječ:\n%s\n', konacnaRijec);







